#!/usr/bin/env python3

import itertools
import json

# Creates an image-mapping.json file from a message dump file

msgs_file = 'messages.txt'
delimiter = '<delimiter>'

def main():
    with open(msgs_file, "r") as f:
        msgs = f.read()
        msg_list = msgs.split(delimiter)
    mapping = build_msg_index(msg_list)
    with open('image-mapping.json', 'w') as f:
        json.dump(mapping, f)

def build_msg_index(msg_list):
    label_mapping = translation_dict()
    msg_index = {}

    def find_matches(msg_i, words, key, labels):
        for w in words:
            for l in labels:
                if w.startswith(l):
                    if key not in msg_index:
                        msg_index[key] = []
                    msg_index[key].append(msg_i)
                    return

    for msg_i, msg in enumerate(msg_list):
        if msg_i % 1000 == 0:
            print(f'Indexing message #{msg_i} out of {len(msg_list)}')
        for key, labels in label_mapping.items():
            find_matches(msg_i, msg.split(' '), key, labels)

    return msg_index

def translation_dict():
    with open('label-dict.json', 'r') as f:
        label_dict = json.load(f)
    return {k: expand_label(v.lower()) for k, v in label_dict.items()}

dogs = [
        'чихуахуа', 'японский спаниель', 'мальтийская собака', 'пекинес', 'ши-тцу', 'бленхейм спаниель', 'папиллон', 'той терьер', 'родезийский риджбек', 'афганская борзая', 'бассет', 'гончая', 'ищейка', 'bluetick', 'черно-подпалый кунхаунд', 'уокер гончая', 'английская лиса', 'redbone', 'борзая', 'ирландский волкодав', 'итальянская борзая', 'гончая', 'ибанская борзая', 'норвежский эльхунд', 'otterhound', 'салуки', 'шотландский олень', 'веймаранер', 'стаффордширский бультерьер', 'американский стаффордширский терьер', 'бедлингтон терьер', 'пограничный терьер', 'керри блю терьер', 'ирландский терьер', 'норфолк терьер', 'норвич терьер', 'йоркширский терьер', 'жесткошерстный фокстерьер', 'лейкленд терьер', 'силихем терьер', 'эрдельтерьер', 'гурий', 'австралийский терьер', 'денди динмонт', 'бостонский бык', 'цвергшнауцер', 'ризеншнауцер', 'стандартный шнауцер', 'скотч терьер', 'тибетский терьер', 'шелковистый терьер', 'мягкошерстный пшеничный терьер', 'вест хайленд уайт терьер', 'лхаса', 'ретривер с плоским покрытием', 'курчавый ретривер', 'золотистый ретривер', 'лабрадор ретривер', 'чесапик бэй ретривер', 'немецкая короткошерстная указка', 'vizsla', 'английский сеттер', 'ирландский сеттер', 'гордон сеттер', 'британи спаниель', 'clumber', 'английский спрингер', 'валлийский спрингер спаниель', 'кокер-спаниель', 'сассекс спаниель', 'ирландский водный спаниель', 'кувас', 'шипперке', 'groenendael', 'малинуа', 'бриар', 'злой водяной', 'комондор', 'древнеанглийская овчарка', 'шетландские овчарки', 'колли', 'бордер колли', 'bouvier des flandres', 'ротвейлер', 'немецкая овчарка', 'доберман', 'миниатюрный пинчер', 'большая швейцарская горная собака', 'бернский зенненхунд', 'аппенцелльский', 'entlebucher', 'боксер', 'бычий дог', 'тибетский мастиф', 'французский бульдог', 'немецкий дог', 'сенбернар', 'эскимос', 'маламут', 'сибирский хаски', 'далматинец', 'affenpinscher', 'басенджи', 'мопс', 'леонберга', 'ньюфаундленд', 'великие пиренеи', 'самоед', 'шпиц', 'чау', 'keeshond', 'брабансон гриффон', 'пембрук', 'кардиган', 'игрушечный пудель', 'миниатюрный пудель', 'стандартный пудель'
]

cats = [
    'египетский кот', 'мадагаскарская кошка', 'сиамская кошка', 'сиамская кошка', 'персидский кот'
]

phrase_substitutions = {
    'экран окна': ['жалюз'],
    'французский хлеб': ['батон', 'булк'],
    'бабушка смит': ['яблок', 'яблоч'],
    'фотокопировальное устройство': ['копирк', 'печат'],
    'карманный компьютер': ['смартфон', 'телефон'],
    'портативный компьютер': ['ноут', 'комп'],
    'СиДи плэйер': ['плеер', 'музык'],
    'блуждающий огонек': ['halloween', 'хэллоуин', 'тыкв'],
    'рождественский чулок': ['рождеств', 'дар', 'чулок'],
    'американский аллигатор': ['аллигатор', 'крок'],
    **{c: ['кот', 'кошк'] for c in cats},
    **{d: ['собак', 'пес', 'псин', 'догго'] for d in dogs}
}

word_substitutions = {
    'веб-сайт': ['веб', 'сайт', 'пип'],
    'телевидение': ['теле'],
    'фуфайка': ['кофт', 'джемп'],
    'клубника': ['клубник'],
    'гранатовый': ['гранат'],
    'пластина': ['тарелк', 'блюд', 'еда', 'кушат'],
    'чизбургер': ['бургер', 'макд'],
    'школьный': ['школ'],
    'тедди': ['плюш', 'мишк'],
    'петух': ['петух', 'петуш'],
    'hammerhead': ['акул', 'рыб'],
    'конвертируемый': ['кабриолет', 'машин', 'авто', 'дорога'],
    'электрогитара': ['гитара', 'рок', 'метал'],
    'hoopskirt': ['плать'],
    'overskirt': ['плать'],
    'ipod': ['яблоко', 'ipod', 'apple', 'джобс'],
    'почтовый': ['почт'],
    'легче': ['зажигалка'],
    'футеровка': ['корабл'],
    'объектива': ['фото', 'объектив', 'зеркалк'],
    'jinrikisha': ['карет'],
    'люка': ['люк', 'водопровод', 'канализ'],
    'комикс': ['аниме', 'манга'],
    'динго': ['додж', 'доге', 'doge'],
    'маскировать': ['маска', 'маскир', 'джокер']
}

def expand_label(label):
    if label in phrase_substitutions:
        return phrase_substitutions[label]

    if ' ' in label:
        return list(itertools.chain.from_iterable(
            expand_label(l) for l in label.split(' ')
            if l != 'на' and l != 'для' and l != 'от' and l != 'с' and l != 'в'
        ))

    if label in word_substitutions:
        return word_substitutions[label]

    if label.endswith('ы'):
        return [label[:-1]]
    if label.endswith('ок'):
        return [label[:-2]]
    if label.endswith('нский') or label.endswith('нская'):
        return [label[:-5]]
    if label.endswith('ский') or label.endswith('ская') or label.endswith('ское') or label.endswith('ские'):
        return [label[:-4]]
    if label.endswith('ный') or label.endswith('ная') or label.endswith('ное') or label.endswith('ные'):
        return [label[:-3]]
    if label.endswith('ая'):
        return [label[:-2]]

    return [label]

main()
